### Aliases ###
alias l='ls -lh'
alias ll='ls -lhtr'
alias rm='rm -i'
alias gitreset='git reset --hard HEAD && git clean -fd'
alias flushdns='dscacheutil -flushcache && sudo killall -HUP mDNSResponder'
alias ssh='ssh -A'
alias root='ssh -A -lroot'
alias mdate='date +%m%d%G%H%M'
alias cssh='csshx --screen 2 --ssh_args "-A"'
alias rcssh='csshx --screen 2 --ssh_args "-A -lroot"'
alias lock='open -a ScreenSaverEngine'
alias sed='gsed'
alias fixgpg='gpg-connect-agent reloadagent /bye'
alias history='history -E 0'
alias duckexpire='defaults write ~/Library/Preferences/ch.sudo.cyberduck.plist s3.url.expire.seconds'

### Behavior Changes ###

# Make rm behave normally
setopt rmstarsilent

# Autocomplete like bash
setopt autolist
unsetopt menucomplete

# Disable globbing
unsetopt nomatch

# Bash-like key bindings
bindkey -e
bindkey  "^[[3~"  delete-char
bindkey '^R' history-incremental-search-backward

# History customization
setopt INC_APPEND_HISTORY
setopt EXTENDED_HISTORY
export HISTTIMEFORMAT="%m/%d/%G %H:%M:%S "
export HISTSIZE=5000
export SAVEHIST=5000
export HISTFILE=~/.zsh_history

### Custom git Prompt ###
setopt prompt_subst
autoload -U colors && colors # Enable colors in prompt

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"
GIT_PROMPT_MERGING="%{$fg[magenta]%}⚡︎%{$reset_color%}"
GIT_PROMPT_UNTRACKED="%{$fg[red]%}●%{$reset_color%}"
GIT_PROMPT_MODIFIED="%{$fg[yellow]%}●%{$reset_color%}"
GIT_PROMPT_STAGED="%{$fg[green]%}●%{$reset_color%}"

# Show Git branch/tag, or name-rev if on detached head
parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
parse_git_state() {

  # Compose this value via multiple conditional appends.
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi

  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi

}

# If inside a Git repository, print its branch and state
gitprompt_string() {
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
}

PS1='%F{1}%n%f%F{white}@%f%F{4}%m%f%F{2}%~%f%F{white}:%f %F{white}%*%f%F{white}
$(gitprompt_string) $%f '

### Mac Tweaks ###

# Set vim as the default editor
export EDITOR=vim

# tar.gz fix
export COPYFILE_DISABLE
export COPY_EXTENDED_ATTRIBUTES_DISABLE

# New sessions start in ~/
cd ~/

# Make sure Vagrant uses virtualbox by default
export VAGRANT_DEFAULT_PROVIDER=virtualbox

# Homebrew PATHs
export PATH="/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/MacGPG2/bin"

### Custom Functions ###
#Start GPG Agent if not already started
if [ ! -f "/tmp/gpgStarted.lock" ]; then
    gpg-connect-agent reloadagent /bye
    touch /tmp/gpgStarted.lock
fi

#cardkeys()
#{
# Enable GPG keys for SSH Auth
if [ -f "${HOME}/.gpg-agent-info" ]; then
     . "${HOME}/.gpg-agent-info"
       export SSH_AUTH_SOCK
fi
#}

# Help keep repos clean by deleting branches that no longer exist upstream
git_prune()
{
git remote prune origin
git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d
}

# Enable thefuck
eval "$(thefuck --alias)"

### Dev Environments ###

# Ruby delays new shell sessions so it's gated behind a function
rubydev()
{
	# Set ruby-build to use brew's OpenSSL
	export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
	# Set ruby to the 2.7.0 environment
	if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
}

# Set the Python environment to Hombrew's 3.8.0
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
fi

# If it exists, load an optional config file that is manually managed
if [[ -f ".extendzsh" ]]; then
	source .extendzsh
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
